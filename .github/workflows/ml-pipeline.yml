name: ML Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  train-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Cache MNIST dataset
      uses: actions/cache@v3
      with:
        path: data
        key: mnist-dataset-v1
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Download MNIST dataset
      run: |
        mkdir -p data
        python -c "
        from torchvision import datasets
        datasets.MNIST('data', train=True, download=True)
        datasets.MNIST('data', train=False, download=True)
        "
    
    - name: Train model
      run: |
        python src/train.py | tee training_output.log
    
    - name: Run tests with pytest
      run: |
        python -m pytest src/test_network.py -v --cov=src/ --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        fail_ci_if_error: true
    
    - name: Upload model artifacts
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: model-artifacts-py${{ matrix.python-version }}
        path: |
          models/best_model.pth
          training_output.log
        retention-days: 14
    
    - name: Save training logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: training-logs-py${{ matrix.python-version }}
        path: training_output.log
        retention-days: 14